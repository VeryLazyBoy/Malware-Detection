from model import MyModel
import pandas as pd
import torch
import numpy as np
import torch.nn as nn


class HpTester():


    def __init__(self, device):
        self.device = device



    def _load(self, filePath):
        checkpoint = torch.load(filePath)
        model = MyModel(device, checkpoint['inputSize'], checkpoint['gatedCnnOutputSize'], checkpoint['gatedCnnStride1'], checkpoint['gatedCnnStride2'], checkpoint['gatedCnnKernel1'], checkpoint['gatedCnnKernel2'], checkpoint['lstmLayer'], checkpoint['lstmHiddenSize'], checkpoint['fcOutputSize'], checkpoint['dropout'])
        model.load_state_dict(checkpoint['stateDict'])
        model.eval()

        if self.device.type == 'cpu':
            model.cpu()
        else:
            model.cuda(device=self.device)
        return model

    def loadModel(self, filePath):
        self.model = self._load(filePath)

    def test(self):
        with torch.no_grad():
            result = {}
            sigmoid = nn.Sigmoid()
            for i in range(6051):
                inputs = np.load('test/{}.npy'.format(i), mmap_mode='r')
                inputs = torch.from_numpy(inputs).unsqueeze(0).permute(0,2,1).to(self.device)
                outputs = self.model(inputs)
                result[i] = sigmoid(outputs).item()
                print(i)

            resultFrame = pd.DataFrame(list(result.items()), columns=['Id', 'Predicted'])
            resultFrame.to_csv('solution2.csv', index=False)


t = 1573200428
id = 0
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
tester = HpTester(device)
tester.loadModel('model/model_{}/model{}.pt'.format(t, id))
tester.test()


